{
    "types": {
        "Entities": {
            "summary": "Service for creating and managing entities in the game.",
            "description": "Obtain this service using `game:GetService(\"Entities\")`.",
            "functions": {
                "Create": {
                    "description": "Creates a new entity at the specified position.",
                    "args": [[{ "name": "position", "type": "vector" }]],
                    "returns": ["Entity"]
                }
            }
        },
        "Server": {
            "summary": "Service for managing server-related functionality.",
            "description": "Obtain this service using `game:GetService(\"Server\")`.",
            "events": {
                "ServerStarted": {
                    "description": "Fired when the server has finished initializing and is ready to accept players."
                }
            }
        },
        "System": {
            "summary": "Service providing core system functionality.",
            "description": "Obtain this service using `game:GetService(\"System\")`.",
            "functions": {
                "CreateTimeout": {
                    "description": "Creates a timeout that executes a callback function after a specified duration.",
                    "args": [
                        [
                            { "name": "duration", "type": "number" },
                            { "name": "callback", "type": "function" }
                        ]
                    ]
                }
            }
        },
        "Game": {
            "summary": "Entrypoint to the API.",
            "description": "Accessible under the global variable `game`. Can be used to retrieve other game services.",
            "functions": {
                "GetService": {
                    "description": "Retrieves a game service by name with optional version compatibility.",
                    "args": [
                        [
                            { "name": "name", "type": "string" },
                            { "name": "compatibility_date", "type": "string", "default": "Latest" }
                        ]
                    ],
                    "returns": ["Service"],
                    "caveats": [
                        {
                            "type": "error",
                            "note": "Function will error when trying to retrieve a service that does not exist."
                        },
                        {
                            "type": "warning",
                            "note": "Function will default back to 'Latest' and log an error if the version parameter is invalid."
                        }
                    ]
                }
            }
        },
        "Entity": {
            "summary": "Class representing player characters, NPCs and other game objects.",
            "functions": {
                "AddVisual": {
                    "description": "Adds a visual to the entity.",
                    "args": [[{ "name": "identifier", "type": "string" }]],
                    "returns": ["EntityVisual"]
                },
                "Spawn": {
                    "description": "Spawns the entity on the given map.",
                    "args": [[{ "name": "map", "type": "string" }]]
                }
            }
        },
        "EntityVisual": {
            "summary": "Visual representation in the game world, used in entities and cursors.",
            "properties": {
                "tint": {
                    "type": "vector",
                    "description": "The tint to apply to the visual."
                }
            },
            "functions": {
                "Remove": {
                    "description": "Removes the visual from the entity or cursor it's attached to."
                }
            }
        },
        "Player": {
            "summary": "Class representing a connecting or connected player.",
            "functions": {
                "AddCursorVisual": {
                    "description": "Attaches a visual to the player's cursor.",
                    "args": [[{ "name": "identifier", "type": "string" }]],
                    "returns": ["EntityVisual"]
                },
                "ClearCursor": {
                    "description": "Removes all visuals from the player's cursor."
                },
                "SetControlledEntity": {
                    "description": "Sets the entity that the player controls.",
                    "args": [[{ "name": "entity", "type": "Entity" }]]
                },
                "SetCameraMode": {
                    "description": "Sets the camera mode for the player.",
                    "args": [[{ "name": "mode", "type": "Players/CameraMode" }]]
                },
                "SetCameraTarget": {
                    "description": "Sets the target that the camera should follow when in Following mode.",
                    "args": [[{ "name": "target", "type": "Entity" }]]
                },
                "SetCameraPosition": {
                    "description": "Sets the camera position (when not in Following mode).",
                    "args": [[{ "name": "position", "type": "vector" }]]
                }
            }
        },
        "Players": {
            "summary": "Service for handling player connections.",
            "description": "Obtain this service using `game:GetService(\"Players\")`.",
            "enums": {
                "CameraMode": {
                    "summary": "Enum that describes the different available camera modes.",
                    "description": "",
                    "values": {
                        "Static": {
                            "description": "The camera is fixed in place."
                        },
                        "Following": {
                            "description": "The camera follows a target set via `SetCameraTarget`."
                        },
                        "FreeFlight": {
                            "description": "The camera can be freely moved around by the client."
                        }
                    }
                }
            },
            "events": {
                "PlayerConnected": {
                    "description": "Fired when a player establishes a connection to the server, before they authenticate or join the game.",
                    "args": [{ "name": "player", "type": "Player" }]
                },
                "PlayerAuthenticated": {
                    "description": "Fired when a player has been successfully authenticated.",
                    "args": [{ "name": "player", "type": "Player" }]
                },
                "PlayerAuthenticationFailed": {
                    "description": "Fired when a player's authentication attempt fails.",
                    "args": [{ "name": "player", "type": "Player" }]
                },
                "PlayerReadyToJoin": {
                    "description": "Fired when a player has loaded necessary assets and is ready to join the game.",
                    "args": [{ "name": "player", "type": "Player" }]
                },
                "PlayerJoined": {
                    "description": "Fired when a player has fully joined the game.",
                    "args": [{ "name": "player", "type": "Player" }]
                },
                "PlayerDisconnected": {
                    "description": "Fired when a player disconnects from the server.",
                    "args": [{ "name": "player", "type": "Player" }]
                }
            }
        }
    }
}
